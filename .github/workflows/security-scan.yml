name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  gosec:
    name: Go Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run GoSec
      uses: securego/gosec@master
      with:
        args: -exclude-generated ./...

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'relativistic-sdk'
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 7
          --scan **/*.go
          --scan **/*.mod
          --scan **/*.sum

    - name: Upload dependency check report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report.html

  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/security-audit

    - name: Run Bandit
      uses: shundor/python-bandit-action@master
      with:
        target: ./

  container-scan:
    name: Container Image Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t relativistic-sdk:latest .

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'relativistic-sdk:latest'
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-fs-results.sarif'

    - name: Upload Trivy image results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.base_ref }}
        head: ${{ github.head_ref }}

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check licenses
      uses: fossa-contrib/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}

    - name: Run License Finder
      uses: licensefinder/license_finder_action@main

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, gosec, dependency-check, sast, container-scan, secret-scan, license-compliance]
    if: always()
    
    steps:
    - name: Aggregate security findings
      run: |
        echo "Security Scan Summary" > security-report.md
        echo "=====================" >> security-report.md
        echo "" >> security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "### Scan Results:" >> security-report.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> security-report.md
        echo "- GoSec: ${{ needs.gosec.result }}" >> security-report.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- SAST: ${{ needs.sast.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md